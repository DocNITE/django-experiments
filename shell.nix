{ pkgs ? import <nixpkgs> {} }:

# That config was, mostly, generated by Deepseek, because:
# 1. Im lazy for write it from scratch and deep into nix lang.
# 2. I don't want make copy-paste my configs from another projects.
# Just take it in mind - some features can'not be work, because 
# DB of ai was outdated in some places :/ 

let
  # By some reasons nix doesn't have some packages 
  # for latest version for python.
  # So... You can change the target version by self.
  # Use 312 or 313 as default.
  python = pkgs.python313;

in pkgs.mkShell {
  name = "django-dev-env";

  buildInputs = [
    # Based
    python
    pkgs.python-launcher # run python with 'py'

    # Main packages
    python.pkgs.pip
    python.pkgs.virtualenv
    python.pkgs.setuptools

    # Disabled AI pkgs, because i wanna try to use 'requirements.txt'. 
    # Well.. Someone can use windows or macos without nix or with docker.
    # |||
    # VVV

    # Django and deps
    #python.pkgs.django
    #python.pkgs.psycopg2  # PostgreSQL adapter
    #python.pkgs.djangorestframework  # If using DRF
    #python.pkgs.python-dotenv  # For environment variables

    # Development tools
    pkgs.nodejs  # For frontend tooling if needed
    pkgs.postgresql  # Local PostgreSQL server
    #pkgs.libpq  # PostgreSQL C library
  ];

  # Environment variables. Holy fuck, AI is magic.
  shellHook = ''
    # Set up Python virtual environment
    if [ ! -d "venv" ]; then
      ${python}/bin/python -m venv venv
    fi

    # Activate virtual environment
    source venv/bin/activate

    # Install development requirements if requirements.txt exists
    if [ -f "requirements.txt" ]; then
      pip install -r requirements.txt
    fi

    # Set Django settings module if not set
    if [ -z "$DJANGO_SETTINGS_MODULE" ]; then
      export DJANGO_SETTINGS_MODULE=project.settings
    fi

    # PostgreSQL environment variables
    export PGDATA=$PWD/postgres_data
    export PGHOST=localhost
    export PGPORT=5432

    # Create PostgreSQL directory if it doesn't exist
    if [ ! -d "$PGDATA" ]; then
      mkdir -p $PGDATA
      ${pkgs.postgresql}/bin/initdb $PGDATA
      echo "PostgreSQL data directory created at $PGDATA"
    fi

    echo "Django development environment ready. PostgreSQL can be started with: pg_ctl start"
  '';

  # Locale settings (important for PostgreSQL and Python)
  LOCALE_ARCHIVE = "${pkgs.glibcLocales}/lib/locale/locale-archive";
  LANG = "en_US.UTF-8"; # TODO: May should be configured.
  LC_ALL = "en_US.UTF-8"; # TODO: May should be configured.
}
